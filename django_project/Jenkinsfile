pipeline {
    agent any
    environment {     
        registry = "roshnihande/capstone-project" 
        registryCredential = 'dockerhubcredentials' 
        dockerImage = ''      
    } 
    stages {
        stage('Checkout') {
            steps {
                // Use GitHub credentials to clone repository
                withCredentials([usernamePassword(credentialsId: 'd39691d9-f12c-4abd-89ec-8639e722b3f7', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PASSWORD')]) {
                    git credentialsId: 'github-credentials', url: 'https://github.com/roshnihande/capstone-project.git'
                }
            }
        }
        stage('test') {
            steps {
              script {
                // List contents of workspace directory
                sh 'ls -l'
            }
            }

        }
        stage('Adjust Permissions') {
            steps {
                script {
                    // Change permissions for django_project directory (replace with actual path if different)
                    sh 'chmod u+rX /var/jenkins_home/workspace/jenkins/django_project'
                }
            }
        }
        
        
        // stage('Build Docker Image') {
        //     steps {
        //       script {
        //         // Build Docker image from Django application code
        //         sh 'docker build -t my-django-app django_project'
        //     }
        //     }
        // }

        stage('Build Docker Image') {
            steps {
                script {
                    // Push the image using credentials stored in Jenkins
                    docker.withRegistry('', registryCredential) {
                        def myImage = docker.build("my-django-app:latest", "-f django_project/Dockerfile django_project")  // Build and assign to variable
                    }
                }
            }
        }   
        stage('Push Docker Image') {
            steps {
                script {
                    // Build the image (assuming it's already built)
                    docker.withRegistry('roshnihande', registryCredential) {  // Replace with your username
                        def imageName = 'my-django-app:latest'  // Assuming the image is already built with this name

                        // Tag the image with your Docker Hub repository and desired tag
                        sh "docker tag ${imageName} roshnihande/my-django-app:latest"  // Replace with your username

                        // Push the tagged image to Docker Hub
                        def myImage = docker.getImage(roshnihande/my-django-app:latest)  // Reference the tagged image
                        myImage.push()  // Push the tagged image
                    }
                }
            }
        }     
        
        stage('Run Tests') {
            steps {
                // Run automated tests to validate the application's functionality
                // Modify this step according to your Django application's testing framework
                sh 'python manage.py test'
            }
        }
        
        stage('Deploy to Minikube') {
            steps {
                // Deploy the Django application to the Minikube Kubernetes cluster
                // Modify this step according to your deployment process (e.g., kubectl apply)
                sh 'kubectl apply -f deployment.yaml'
            }
        }
    }
}

